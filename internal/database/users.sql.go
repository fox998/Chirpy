// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash)
VALUES (
    $1,
    $2
)
RETURNING id, creted_at, updated_at, email, password_hash, is_chirpy_red
`

type CreateUserParams struct {
	Email        string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CretedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PasswordHash,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, creted_at, updated_at, email, password_hash, is_chirpy_red FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CretedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PasswordHash,
		&i.IsChirpyRed,
	)
	return i, err
}

const resetUsers = `-- name: ResetUsers :exec
TRUNCATE TABLE users CASCADE
`

func (q *Queries) ResetUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsers)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    email = $2,
    password_hash = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, creted_at, updated_at, email, password_hash, is_chirpy_red
`

type UpdateUserParams struct {
	ID           uuid.UUID
	Email        string
	PasswordHash string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Email, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CretedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PasswordHash,
		&i.IsChirpyRed,
	)
	return i, err
}

const updateUserIsChirpyRed = `-- name: UpdateUserIsChirpyRed :one
UPDATE users
SET
    is_chirpy_red = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, creted_at, updated_at, email, password_hash, is_chirpy_red
`

type UpdateUserIsChirpyRedParams struct {
	ID          uuid.UUID
	IsChirpyRed bool
}

func (q *Queries) UpdateUserIsChirpyRed(ctx context.Context, arg UpdateUserIsChirpyRedParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserIsChirpyRed, arg.ID, arg.IsChirpyRed)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CretedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PasswordHash,
		&i.IsChirpyRed,
	)
	return i, err
}
